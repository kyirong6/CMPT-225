Priority Queue ADT
------------------

* stores a collection of objects with priorities.
	* priorities from any ordered set.
	* for simplicity, we use {0,1,2...} with 0 the highest priority.
	
* Has operations:
	* insert (item, priority)
	* extract_min()
	* update (item, priority)


Naive P.Q Implementaitons
-------------------------

* unordered array or LL
	* O(n) for extract_min

* ordered array or LL
	* insert is O(n)


We will use a Rooted Binary Tree Instead
----------------------------------------

* Binary: every node has <= 2 children.

* 2 children: left, right. (they are ordered)

* Proper Binary Tree: every node has 0 or 2 children

* Perfect Binary Tree: a proper Binary Tree where every leaf has the same depth.

* Complete Binary Tree:
	* every level, except perhaps the deepest, is "full"
	* nodes at the deepest level are "as far left as possible"

 

Binary Heap Data Structure
--------------------------

* A complete binary tree  ]- "shape invariant"

* with vertices labelled by keys from some ordered set, s.t key(v) >= key(parent(v)) ]- "order invariant"


- This is our Data Structure for implementing Priority Queues.


Heap Insertion
--------------

* Need to add a vertex to the tree which has a very restricted shape.
	* But, the tree is only partially ordered: there is no "right place" to insert a value.
	* To insert a new key into heap H:
		1. Create a new node v with key(v)
		2. Add v as a new leaf, maintaining the shape invariant.
		3. Re-establish the order invariant, using the procedure: 
		
			trickle_up(v) {
				while (v is not root AND key(v) < key(parent(v))) {
					swap v and parent(v)
				}
			}


Heap Removal (Extract_min):

	* min. key is at root: remove it
	* fix the shape by moving the "bottom right" leaf to the root
	* Then repair the order invariant. - using a trickle_down procedure

		trickle_down() {
			v <- root
			while (v has a child c with key(c) < key(v)) {
				c <- child of v with min. key among the children of v
				swap v with c
			}
		}	


Rooted Tree Depth and Height.
			-----     ------
	* Depth of a node v in tree T:
		- length of path from root of T to v.
	* Height of node v in tree T:
		- length of the longest path from v to a descendent of v in T. (all leaves have a height of 0)
	* Height of T = height of its root  = depth of its lowest leaf (max depth)









		